package code.service;

import code.dto.admin.ComplaintResponse;
import code.dto.fishing_instructor.ProfitInInterval;
import code.exceptions.admin.*;
import code.exceptions.entities.*;
import code.exceptions.provider_registration.EmailTakenException;
import code.exceptions.provider_registration.UnauthorizedAccessException;
import code.exceptions.provider_registration.UserNotFoundException;
import code.model.*;
import code.model.base.Action;
import code.model.base.Reservation;
import code.model.boat.Boat;
import code.model.boat.BoatOwner;
import code.model.cottage.Cottage;
import code.model.cottage.CottageOwner;

import java.util.Collection;
import java.util.List;

public interface AdminService {
    Admin save(Admin admin) throws NonMainAdminRegisterOtherAdminException, EmailTakenException;
    Admin changePersonalData(Admin admin) throws NotChangedPasswordException;
    void changePassword(Admin admin) throws ChangedPasswordException;
    void deleteFishingInstructor(Integer id) throws NotChangedPasswordException, UserNotFoundException, UnexpectedUserRoleException, EntityNotDeletableException;
    void deleteCottageOwner(Integer id) throws NotChangedPasswordException, UserNotFoundException, UnexpectedUserRoleException, EntityNotDeletableException;
    void deleteBoatOwner(Integer id) throws NotChangedPasswordException, UserNotFoundException, UnexpectedUserRoleException, EntityNotDeletableException;
    void deleteClient(Integer id) throws NotChangedPasswordException, UserNotFoundException, UnexpectedUserRoleException, EntityNotDeletableException;
    void deleteCottage(Integer id) throws NotChangedPasswordException, EntityNotFoundException, UnexpectedUserRoleException, EntityNotDeletableException, UserNotFoundException, UnauthorizedAccessException, EntityNotOwnedException;
    void deleteBoat(Integer id) throws NotChangedPasswordException, EntityNotFoundException, UnexpectedUserRoleException, EntityNotDeletableException, UserNotFoundException, UnauthorizedAccessException, EntityNotOwnedException;
    void fishingReservationCommentaryAccept(Integer reservationId) throws EntityNotFoundException, NotChangedPasswordException, CommentaryNotApprovableException;
    void fishingReservationCommentaryDecline(Integer reservationId) throws EntityNotFoundException, NotChangedPasswordException, CommentaryNotApprovableException;
    void fishingQuickReservationCommentaryAccept(Integer quickReservationId) throws EntityNotFoundException, NotChangedPasswordException, CommentaryNotApprovableException;
    void fishingQuickReservationCommentaryDecline(Integer quickReservationId) throws EntityNotFoundException, NotChangedPasswordException, CommentaryNotApprovableException;
    void reservationCommentaryAccept(Integer reservationId) throws EntityNotFoundException, NotChangedPasswordException, CommentaryNotApprovableException;
    void reservationCommentaryDecline(Integer reservationId) throws EntityNotFoundException, NotChangedPasswordException, CommentaryNotApprovableException;
    void quickReservationCommentaryAccept(Integer quickReservationId) throws EntityNotFoundException, NotChangedPasswordException, CommentaryNotApprovableException;
    void quickReservationCommentaryDecline(Integer quickReservationId) throws EntityNotFoundException, NotChangedPasswordException, CommentaryNotApprovableException;
    void changeCurrentSystemTaxPercentage(CurrentSystemTaxPercentage currentSystemTaxPercentage) throws NotChangedPasswordException;
    void currentPointsClientGetsAfterReservation(CurrentPointsClientGetsAfterReservation currentPointsClientGetsAfterReservation) throws NotChangedPasswordException;
    void currentPointsProviderGetsAfterReservation(CurrentPointsProviderGetsAfterReservation currentPointsProviderGetsAfterReservation) throws NotChangedPasswordException;
    void changeClientPointsNeededForLoyaltyProgramCategory(Integer id, LoyaltyProgramClient loyaltyProgramClient) throws NotChangedPasswordException, EntityNotUpdateableException;
    void changeProviderPointsNeededForLoyaltyProgramCategory(Integer id, LoyaltyProgramProvider loyaltyProgramProvider) throws NotChangedPasswordException, EntityNotUpdateableException;
    void respondToComplaint(Integer id, ComplaintResponse complaintResponse) throws EntityNotFoundException, EntityNotUpdateableException;
    void respondToComplaintFishingInstructor(Integer id, ComplaintResponse complaintResponse) throws EntityNotFoundException, EntityNotUpdateableException;
    void acceptReview(Integer id) throws EntityNotFoundException, EntityNotUpdateableException;
    void acceptReviewFishingTrip(Integer id) throws EntityNotFoundException, EntityNotUpdateableException;
    void declineReview(Integer id) throws EntityNotFoundException;
    void declineReviewFishingTrip(Integer id) throws EntityNotFoundException;
    Admin getLoggedInAdmin();
    String getIncomeInTimeInterval(ProfitInInterval profitInInterval) throws EntityBadRequestException;
    List<IncomeRecord> getAllIncomeRecords();
    String getCurrentSystemTax();
    String getCurrentPointsProviderGetsAfterReservation();
    String getCurrentPointsClientGetsAfterReservation();
    List<LoyaltyProgramProvider> getAllLoyaltyProviderCategories();
    List<LoyaltyProgramClient> getAllLoyaltyClientCategories();
    List<CottageOwner> getAllCottageOwners();
    List<Cottage> getAllCottages();
    List<BoatOwner> getAllBoatOwners();
    List<Boat> getAllBoats();
    List<FishingInstructor> getAllFishingInstructors();
    List<Client> getAllClients();
    List<Reservation> getReservationsWithCommentariesForAdmin();
    List<Action> getQuickReservationsWithCommentariesForAdmin();
    List<FishingTripReservation> getFishingReservationsWithCommentariesForAdmin();
    List<FishingTripQuickReservation> getFishingQuickReservationsWithCommentariesForAdmin();
    List<Complaint> getAllComplaints();
    List<ComplaintFishingInstructor> getAllFishingInstructorComplaints();
    List<Review> getAllUnapprovedReviews();
    List<ReviewFishingTrip> getAllUnapprovedFishingTripReviews();
}
